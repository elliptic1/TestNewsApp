plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

apply from: '../dependencies.gradle'

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }

}

dependencies {
    implementation project(path: ':common')
    implementation project(path: ':mock')
    implementation project(path: ':service')

    implementation dep.retrofit.retrofit
    implementation dep.retrofit.converterGson

    implementation dep.kotlinx.coroutines.android
    implementation dep.kotlinx.coroutines.core
    implementation dep.android.material
    implementation dep.javax.inject

    implementation dep.androidx.appCompat
    implementation dep.androidx.activityKtx
    implementation dep.androidx.coreKtx
    implementation dep.androidx.activityCompose

    implementation dep.coil

    testImplementation dep.test.junit
    androidTestImplementation dep.androidx.test.extJUnit
    androidTestImplementation dep.androidx.test.espresso.core
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        // Treat all Kotlin warnings as errors (disabled by default)
        allWarningsAsErrors = project.hasProperty("warningsAsErrors") ? project.warningsAsErrors : false

        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
        // Enable experimental coroutines APIs, including Flow
        freeCompilerArgs += '-Xopt-in=kotlin.Experimental'

        // Set JVM target to 1.8
        jvmTarget = "1.8"
    }
}

tasks.withType(Test) {
    systemProperty "robolectric.logging", "stdout"
}

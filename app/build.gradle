/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

apply from: '../dependencies.gradle'

android {
    compileSdkVersion versions.compileSdk
    defaultConfig {
        applicationId 'com.tbse.mininews'
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName '1.0'
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    signingConfigs {
        // We use a bundled debug keystore, to allow debug builds from CI to be upgradable
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    // Tests can be Robolectric or instrumented tests
    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion versions.composeCompiler
    }
    packagingOptions {
        resources {
            excludes += ['/META-INF/AL2.0', '/META-INF/LGPL2.1']
        }
    }

    namespace 'com.tbse.mininews'
}

dependencies {

    implementation project(path: ':common')
    implementation project(path: ':domain')
    implementation project(path: ':mock')
    implementation project(path: ':service')

    implementation dep.kotlinx.coroutines.android
    implementation dep.kotlinx.coroutines.core

    implementation dep.compose.runtime
    implementation dep.compose.ui
    implementation dep.compose.material
    implementation dep.compose.materialIconsExtended
    implementation dep.compose.foundation
    implementation dep.compose.foundationLayout
    implementation dep.compose.animation
    implementation dep.compose.uiTooling
    implementation dep.compose.runtimeLivedata

    implementation dep.accompanist.swipeRefresh
    implementation dep.accompanist.insets
    implementation dep.accompanist.systemUiController

    implementation dep.androidx.appCompat
    implementation dep.androidx.activityKtx
    implementation dep.androidx.coreKtx
    implementation dep.androidx.activityCompose

    implementation dep.androidx.lifecycle.viewmodelKtx
    implementation dep.androidx.lifecycle.viewModelSavedState
    implementation dep.androidx.lifecycle.livedataKtx
    implementation dep.androidx.lifecycle.viewmodelCompose
    implementation dep.androidx.navigation

    androidTestImplementation dep.androidx.test.core
    androidTestImplementation dep.androidx.test.rules
    androidTestImplementation dep.androidx.test.runner
    androidTestImplementation dep.androidx.test.uiTest
    androidTestImplementation dep.androidx.test.uiTestJUnit4
    androidTestImplementation dep.androidx.test.uiTestManifest

    testImplementation dep.androidx.test.robolectric
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        // Treat all Kotlin warnings as errors (disabled by default)
        allWarningsAsErrors = project.hasProperty("warningsAsErrors") ? project.warningsAsErrors : false

        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
        // Enable experimental coroutines APIs, including Flow
        freeCompilerArgs += '-Xopt-in=kotlin.Experimental'

        // Set JVM target to 1.8
        jvmTarget = "1.8"
    }
}

tasks.withType(Test) {
    systemProperty "robolectric.logging", "stdout"
} 
